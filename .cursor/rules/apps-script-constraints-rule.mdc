---
description: Reminds about Google Apps Script (GAS) constraints when working in the apps_script directory.
globs: src/apps_script/**/*.js
alwaysApply: false
---
\
---
type: Auto Attached
description: Reminds about Google Apps Script (GAS) constraints when working in the apps_script directory.
globs: src/apps_script/**/*.js
---
# Google Apps Script Development Constraints

Rule for developing code that works both in Google Apps Script environment and in testing environments.

<rule>
name: apps_script_constraints
filters:
  - type: file_change
    pattern: "src/apps_script/.*\\\\.(js|gs|html)$"
  - type: file_create
    pattern: "src/apps_script/.*\\\\.(js|gs|html)$"
  - type: command
    pattern: "test"

actions:
  - type: react
    event: "file_change"
    conditions:
      - pattern: "src/apps_script/.*\\\\.(js|gs)$"
    action: |
      # Check Apps Script file compatibility

      When modifying Apps Script files, I'll ensure:

      1. **Conditional Export Pattern:** All files needing testing use the conditional export pattern AT THE END:
         ```javascript
         // Only export for tests
         if (typeof module !== 'undefined' && module.exports) {
           module.exports = {
             myFunction,
             anotherFunction
             // DO NOT export internal constants unless absolutely needed for testing
           };
         }
         ```

      2. **No ES6 Module Features:** Avoiding `import`/`export` statements within the main code body.

      3. **Google Services:** Using Google services directly (e.g., `SpreadsheetApp.getActiveSheet()`). These will be mocked globally in `tests/setup.js`.

      4. **Global Namespace:** Functions defined globally in any `.js`/`.gs` file are available everywhere else. Be mindful of naming conflicts.

      5. **Testing Structure:** Ensure tests rely on the global environment created by `tests/setup.js` (see 'test setup' action).

      These checks help maintain compatibility between Apps Script and testing environments.

  - type: react
    event: "file_create"
    conditions:
      - pattern: "src/apps_script/.*\\\\.(js|gs)$"
    action: |
      # Add Apps Script compatibility template to new file

      For new Apps Script files, I'll suggest this template pattern:

      ```javascript
      /**
       * [Filename] - [Brief description]
       */

      /**
       * [Function description]
       * @param {type} param - Parameter description
       * @returns {type} Return value description
       */
      function myFunction(param) {
        // Implementation
        Logger.log('Executing myFunction');
        const scriptProps = PropertiesService.getScriptProperties();
        // ... use GAS services ...
        return result;
      }

      // Additional functions...

      // Only export for tests (at the end of the file)
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = {
          myFunction
          // other functions to export
        };
      }
      ```

      This template ensures the file works both in Apps Script environment and can be prepared for testing via `tests/setup.js`.

  - type: react
    conditions:
      - pattern: "test setup|test help|apps script test"
    action: |
      # Provide guidance on Apps Script testing setup (Updated)

      To properly test Apps Script code using Jest:

      ## 1. Configure `jest.config.js` Correctly

      Use these key settings:

      ```javascript
      // jest.config.js
      module.exports = {
        // Use 'node' environment
        testEnvironment: 'node',

        // Crucially, use `setupFiles` (NOT `setupFilesAfterEnv`)
        // This runs setup.js *before* the test environment is fully initialized,
        // allowing us to establish the global mocks first.
        setupFiles: ['./tests/setup.js'],

        testMatch: ['**/tests/**/*.test.js'],
        // Other configurations like coverage, roots etc.
        roots: ["<rootDir>/src", "<rootDir>/tests"],
        verbose: true,
        clearMocks: true,
      };
      ```

      ## 2. Create a Centralized `setup.js` for Global Simulation

      The `setup.js` file simulates the GAS global environment. Its role is critical:

      ```javascript
      // tests/setup.js

      // --- DO NOT import Jest globals like describe, it, expect, jest, beforeEach ---
      // --- They are already globally available via the Jest test environment! ---
      // --- Importing them here (e.g., via require('@jest/globals')) will cause errors. ---

      // Mock basic Google services globally
      // Use the globally available `jest` object for mocking
      global.SpreadsheetApp = {
        getActiveSheet: jest.fn().mockReturnValue({
           getRange: jest.fn().mockReturnValue({
             getValues: jest.fn().mockReturnValue([['test']]),
             setValues: jest.fn()
           })
        }),
        getUi: jest.fn().mockReturnValue({ /* ...mock details... */ })
        // ... other SpreadsheetApp mocks
      };
      global.PropertiesService = {
        getScriptProperties: jest.fn().mockReturnValue({
           getProperty: jest.fn(),
           setProperty: jest.fn(),
           deleteProperty: jest.fn()
           // ... etc
        })
      };
      // ... mock other GAS services (UrlFetchApp, HtmlService, Logger, etc.)


      // --- Load functions from your source files ---
      // Use `require` instrumentally here ONLY to get access to the source functions
      // exported via the conditional pattern. This does NOT mean `require` works
      // inside the simulated GAS runtime.
      const RangeUtils = require('../src/RangeUtils'); // Assumes RangeUtils.js has the export block
      const ApiClient = require('../src/ApiClient');   // Assumes ApiClient.js has the export block
      // ... require other source files needed

      // --- Make source functions global (wrapped with jest.fn) ---
      // This mimics GAS's global scope for functions, making them available in tests.
      global.validateRange = jest.fn(RangeUtils.validateRange);
      global.validateOutputColumn = jest.fn(RangeUtils.validateOutputColumn);
      global.makeApiRequest = jest.fn(ApiClient.makeApiRequest); // Example
      // ... assign other required functions from required modules to global scope

      // --- Helper to reset mocks ---
      global.resetAllMocks = () => {
        // Use the globally available jest object
        jest.clearAllMocks();

        // You might need to reset specific mock implementations or states here, e.g.:
        // if (global.PropertiesService.getScriptProperties().getProperty.mockClear) {
        //   global.PropertiesService.getScriptProperties().getProperty.mockClear();
        // }
        // Resetting the mocks on the service objects is often sufficient if using clearMocks: true in config
      };

      // --- Register Reset Hook ---
      // Use the globally available beforeEach. It's added by Jest's environment.
      beforeEach(() => {
        resetAllMocks();
      });
      ```

      **Key points for `setup.js`:**
      *   It *simulates* GAS globals before tests run.
      *   It uses `require` only to *load* source code for setup, relying on the conditional `module.exports` in source files.
      *   It assigns functions (wrapped in `jest.fn`) and mock services to the `global` object.
      *   It uses the *already globally available* `jest`, `beforeEach`, `describe`, `it`, `expect`. **Do not `require('@jest/globals')`.**

      ## 3. Write Tests Using Global Functions and Mocks

      Test files should interact primarily with the global environment established by `setup.js`:

      ```javascript
      // Example test file: tests/MyCode.test.js

      // --- Avoid top-level `require` for source functions ---
      // --- Rely on the globally available functions assigned in setup.js ---

      // --- EXCEPTION: May need `require` for CONSTANTS exported via the conditional pattern ---
      // Example: If ApiClient.js exports API_CONFIG constant conditionally:
      // const { API_CONFIG } = require('../src/ApiClient');

      describe('My Functionality', () => {
        // Use globally available beforeEach (no import needed)
        beforeEach(() => {
          // resetAllMocks() is often called automatically via setup.js beforeEach hook
          // Add specific mock setups for this describe block if needed:
          PropertiesService.getScriptProperties().getProperty.mockReturnValue('test-value');
        });

        // Use globally available 'it'
        it('should do something correctly', () => {
          // Call the globally available function directly (was assigned in setup.js)
          const result = myFunctionGloballyAvailable('input');

          // Use globally available 'expect'
          expect(result).toBe('expected-output');

          // Verify calls to global mocks
          expect(PropertiesService.getScriptProperties().getProperty).toHaveBeenCalledWith('someKey');
        });
      });
      ```
      **Testing Constants:** Constants (like `API_CONFIG`) defined *inside* source files are not automatically made global by `setup.js`.
          * **Option A (Preferred):** Test the *behavior* of functions that *use* the constant, rather than testing the constant directly. How does the function behave with default options?
          * **Option B (If necessary):** If you must access the constant, ensure it's included in the conditional `module.exports` in the source file, then use a `require` *at the top of the test file* specifically for that constant. Treat this as an exception.

      This refined approach ensures tests accurately reflect the GAS environment constraints.

  - type: suggest
    message: |
      ### Google Apps Script (GAS) Constraints Reminder (Updated)

      You are working within the `src/apps_script/` directory. Remember these key points:

      1.  **No Standard Modules:** Runtime GAS code uses a **single global scope**. No `require` or `import`.
      2.  **Global Access:** Functions in any `.js`/`.gs` file are globally accessible by name.
      3.  **GAS Services:** Use global services like `SpreadsheetApp` directly.
      4.  **Testing Strategy:**
          *   Use Jest with `testEnvironment: 'node'` and `setupFiles: ['./tests/setup.js']`.
          *   `setup.js` **simulates the global environment**:
              *   Mocks GAS services globally (e.g., `global.SpreadsheetApp = jest.fn(...)`).
              *   Uses `require` instrumentally to load source file functions (which must have conditional exports).
              *   Assigns required functions (wrapped in `jest.fn`) to the `global` object (e.g., `global.myFunction = jest.fn(...)`).
              *   Uses **globally available** Jest functions (`describe`, `it`, `expect`, `beforeEach`, `jest`). **Do not import from `@jest/globals`**.
          *   Test files interact with the **global functions and mocks** created by `setup.js`.
          *   Avoid `require` in test files, except potentially for constants exported conditionally from source files (prefer testing behavior instead).
          *   Use conditional exports (`if (typeof module !== 'undefined' && module.exports)`) **at the end** of your source `.js` files for functions/constants needed in tests.

examples:
  - input: |
      test setup
    output: "Guiding on the correct Jest setup for Apps Script, emphasizing global simulation..."

  - input: |
      How do I handle imports in Apps Script tests?
    output: "Apps Script runtime has no imports. For testing with Jest, use `setup.js` to create a global simulation. Your test files then use these global functions/mocks. Avoid `require` in tests unless necessary for constants."

metadata:
  priority: high
  version: 1.1 # Incremented version due to significant update
</rule>
