---
description: Apply this rule whenever running any terminal or shell or bash commands
globs: 
alwaysApply: false
---
---
description: Apply this rule whenever running any terminal or shell or bash commands
globs: 
alwaysApply: false
---
# Rule: Enforce Consistent Command Practices

# This rule ensures terminal commands executed via the AI follow consistent practices
# to prevent errors and maintain best practices across the project.

<rule>
name: enforce_terminal_practices
filters:
  # Filter for when the run_terminal_cmd tool is about to be used.
  - type: tool_call
    pattern: "run_terminal_cmd"

actions:
  # React by providing instructions to the AI Assistant (me).
  - type: react
    action: |
      # 1. Prepend cd to project root before executing terminal command

      **RULE TRIGGERED: enforce_terminal_practices**

      Before executing the proposed terminal command, I MUST ensure it is prefixed with:
      `cd /home/jsnyde0/Documents/code/humble-clay/ && `

      **Reason:** To guarantee command execution within the intended directory and ensure reliable path resolution, preventing errors observed previously.

      # 2. Use UV for Python-related commands
      
      For Python commands, I MUST follow these practices:
      
      - Use `uv run pytest` instead of `python -m pytest` or direct `pytest` calls
      - Use `uv run python` instead of directly calling `python`
      - Use `uv pip install` instead of `pip install`
      
      **Reason:** UV provides better performance, dependency resolution, and consistent environment management.

      # 3. Git command best practices
      
      When using Git commands, I MUST follow these practices:
      
      - ALWAYS run `git status` before attempting to add or commit files to see the current state
      - Be thorough when adding files - don't miss related files or tests
      - For commits that modify multiple areas, use `git add <specific files>` rather than `git add .`
      - When working on related changes across multiple files, ensure all relevant files are added to the same commit
      - After running `git add`, run `git status` again to verify the correct files are staged
      - Use conventional commit messages with appropriate scope
      
      **Reason:** This ensures all relevant files are properly tracked and committed together, preventing fragmented commits and ensuring the repository remains in a consistent state.
      
      # 4. Test before commit
      
      CRITICAL: Before EVERY commit of code changes, I MUST:
      
      - Run `uv run pytest` in the project root directory
      - Ensure ALL tests pass successfully
      - If tests fail, fix the issues before committing
      - NEVER commit code that fails tests
      
      **Reason:** This prevents broken code from being committed to the repository and maintains code quality. Committing untested code risks introducing regressions and bugs into the codebase.
      
      I will now modify the proposed command to include these requirements.

metadata:
  # Critical priority to ensure it's checked before every relevant command.
  priority: critical
  version: 1.0
</rule>